message(STATUS "Setting up Eosio Wasm Toolchain @VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@ at @CDT_ROOT_DIR@")
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_CROSSCOMPILING 1)
set(CMAKE_C_COMPILER_WORKS 1)
set(CMAKE_CXX_COMPILER_WORKS 1)

set(EOSIO_CDT_VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@")
set(EOSIO_WASMSDK_VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@")

set(CMAKE_C_COMPILER "@CDT_ROOT_DIR@/bin/eosio-cc" CACHE PATH "cc" FORCE)
set(CMAKE_CXX_COMPILER "@CDT_ROOT_DIR@/bin/eosio-cpp" CACHE PATH "cxx" FORCE)

set(CMAKE_C_FLAGS " -O3 ")
set(CMAKE_CXX_FLAGS " -O3 ")

set(WASM_LINKER "@CDT_ROOT_DIR@/bin/eosio-ld")

set(CMAKE_C_LINK_EXECUTABLE "${WASM_LINKER} <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
set(CMAKE_CXX_LINK_EXECUTABLE "${WASM_LINKER} <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")

set(CMAKE_AR "@CDT_ROOT_DIR@/bin/eosio-ar" CACHE PATH "ar" FORCE)
set(CMAKE_RANLIB "@CDT_ROOT_DIR@/bin/eosio-ranlib" CACHE PATH "ranlib" FORCE)
set(ABIGEN "@CDT_ROOT_DIR@/bin/eosio-abigen")

set(CMAKE_C_CREATE_STATIC_LIBRARY "${CMAKE_AR} qc <TARGET> <LINK_FLAGS> <OBJECTS> "
                                  "${CMAKE_RANLIB} <TARGET>")
set(CMAKE_CXX_CREATE_STATIC_LIBRARY "${CMAKE_AR} qc <TARGET> <LINK_FLAGS> <OBJECTS> "
                                    "${CMAKE_RANLIB} <TARGET>")

# hack for CMake on Linux
#set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
#set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)

# hack for OSX
set(CMAKE_OSX_SYSROOT="@SYSROOT_DIR@")
set(CMAKE_OSX_DEPLOYMENT_TARGET="")
include_directories(
      @CDT_ROOT_DIR@/eosio.cdt/include/libcxx
      @CDT_ROOT_DIR@/eosio.cdt/include/libc
      @CDT_ROOT_DIR@/eosio.cdt/include/)

macro(add_contract CONTRACT_NAME TARGET)
   add_executable( ${TARGET}.wasm ${ARGN} )
   target_compile_options( ${TARGET}.wasm PUBLIC -abigen )
   get_target_property(BINOUTPUT ${TARGET}.wasm BINARY_DIR)
   target_compile_options( ${TARGET}.wasm PUBLIC -abigen_output=${BINOUTPUT}/${TARGET}.abi )
   target_compile_options( ${TARGET}.wasm PUBLIC -contract ${CONTRACT_NAME} )
endmacro()

macro(add_wasm_c_library TARGET)
   add_library( ${TARGET} ${ARGN} )
   set_target_properties(${TARGET} PROPERTIES LINKER_LANGUAGE C)
endmacro()

macro(add_wasm_cxx_library TARGET)
   add_library( ${TARGET} ${ARGN} )
   set_target_properties(${TARGET} PROPERTIES LINKER_LANGUAGE CXX)
endmacro()
